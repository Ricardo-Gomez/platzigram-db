{"version":3,"sources":["db-test.js"],"names":[],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\n\ntest.beforeEach('setup database', async t => {\n  const dbName = `platzigram_${uuid.v4()}`\n  const db = new Db({db: dbName})\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\ntest.afterEach.always('cleanup database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnected')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  let db = t.context.db\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, ['awesome', 'picture', 'tags'])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\ntest('like image', async t => {\n  let db = t.context.db\n  t.is(typeof db.likeImage, 'function', 'likedImage should be a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.public_id)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\ntest('getImage', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.public_id)\n\n  t.deepEqual(created, result)\n})\n\ntest('list all images', async t => {\n  let db = t.context.db\n  let images = fixtures.getImages(3)\n  let saveImages = images.map(img => db.saveImage(img))\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.length, result.length)\n})\n"]}