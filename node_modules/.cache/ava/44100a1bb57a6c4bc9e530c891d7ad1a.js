'use strict';

var _typeof2 = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

var _index = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _asyncToGenerator2 = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var uuid = require('uuid-base62');
var r = require('rethinkdb');
var Db = require('../');

var dbName = 'platzigram_' + uuid.v4();
var db = new Db({ db: dbName });

test.before('setup database', function () {
  var _ref = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee(t) {
    var _rec = new _powerAssertRecorder();

    return _index2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return db.connect();

          case 2:
            t.true(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
              content: 't.true(db.connected, \'should be connected\')',
              filepath: 'test/db-test.js',
              line: 13,
              async: true
            }), 'should be connected');

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

test.after('disconect database', function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee2(t) {
    var _rec2 = new _powerAssertRecorder();

    return _index2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return db.disconnect();

          case 2:
            t.false(_rec2._expr(_rec2._capt(_rec2._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
              content: 't.false(db.connected, \'should be disconnected\')',
              filepath: 'test/db-test.js',
              line: 18,
              async: true
            }), 'should be disconnected');

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

test.after.always('cleanup database', function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee3(t) {
    var conn;
    return _index2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return r.connect({});

          case 2:
            conn = _context3.sent;
            _context3.next = 5;
            return r.dbDrop(dbName).run(conn);

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

test('save image', function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee4(t) {
    var _rec3 = new _powerAssertRecorder();

    return _index2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            t.is(_rec3._expr(_rec3._capt((0, _typeof3.default)(_rec3._capt(_rec3._capt(db, 'arguments/0/argument/object').saveImage, 'arguments/0/argument')), 'arguments/0'), {
              content: 't.is(typeof db.saveImage, \'function\', \'saveImage is function\')',
              filepath: 'test/db-test.js',
              line: 27,
              async: true
            }), 'function', 'saveImage is function');

          case 1:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());
//# sourceMappingURL=../node_modules/.cache/ava/44100a1bb57a6c4bc9e530c891d7ad1a.js.map