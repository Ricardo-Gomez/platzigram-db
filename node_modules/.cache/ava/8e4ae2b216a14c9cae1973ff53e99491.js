'use strict';

var _typeof2 = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

var _index = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _asyncToGenerator2 = require('/home/richy/node-projects/platzigram-db/node_modules/ava/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var uuid = require('uuid-base62');
var r = require('rethinkdb');
var Db = require('../');
var fixtures = require('./fixtures');

var dbName = 'platzigram_' + uuid.v4();
var db = new Db({ db: dbName });

test.before('setup database', function () {
  var _ref = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee(t) {
    var _rec = new _powerAssertRecorder();

    return _index2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return db.connect();

          case 2:
            t.true(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
              content: 't.true(db.connected, \'should be connected\')',
              filepath: 'test/db-test.js',
              line: 14,
              async: true
            }), 'should be connected');

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

test.after('disconect database', function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee2(t) {
    var _rec2 = new _powerAssertRecorder();

    return _index2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return db.disconnect();

          case 2:
            t.false(_rec2._expr(_rec2._capt(_rec2._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
              content: 't.false(db.connected, \'should be disconnected\')',
              filepath: 'test/db-test.js',
              line: 19,
              async: true
            }), 'should be disconnected');

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

test.after.always('cleanup database', function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee3(t) {
    var conn;
    return _index2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return r.connect({});

          case 2:
            conn = _context3.sent;
            _context3.next = 5;
            return r.dbDrop(dbName).run(conn);

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

test('save image', function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee4(t) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder(),
        _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder(),
        _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder(),
        _rec13 = new _powerAssertRecorder(),
        _rec14 = new _powerAssertRecorder(),
        _rec15 = new _powerAssertRecorder(),
        _rec16 = new _powerAssertRecorder(),
        _rec17 = new _powerAssertRecorder(),
        _rec18 = new _powerAssertRecorder(),
        _rec19 = new _powerAssertRecorder();

    var image, created;
    return _index2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            t.is(_rec3._expr(_rec3._capt((0, _typeof3.default)(_rec3._capt(_rec3._capt(db, 'arguments/0/argument/object').saveImage, 'arguments/0/argument')), 'arguments/0'), {
              content: 't.is(typeof db.saveImage, \'function\', \'saveImage is function\')',
              filepath: 'test/db-test.js',
              line: 28,
              async: true
            }), 'function', 'saveImage is function');
            image = fixtures.getImage();
            _context4.next = 4;
            return db.saveImage(image);

          case 4:
            created = _context4.sent;

            t.is(_rec4._expr(_rec4._capt(_rec4._capt(created, 'arguments/0/object').description, 'arguments/0'), {
              content: 't.is(created.description, image.description)',
              filepath: 'test/db-test.js',
              line: 32,
              async: true
            }), _rec5._expr(_rec5._capt(_rec5._capt(image, 'arguments/1/object').description, 'arguments/1'), {
              content: 't.is(created.description, image.description)',
              filepath: 'test/db-test.js',
              line: 32,
              async: true
            }));
            t.is(_rec6._expr(_rec6._capt(_rec6._capt(created, 'arguments/0/object').url, 'arguments/0'), {
              content: 't.is(created.url, image.url)',
              filepath: 'test/db-test.js',
              line: 33,
              async: true
            }), _rec7._expr(_rec7._capt(_rec7._capt(image, 'arguments/1/object').url, 'arguments/1'), {
              content: 't.is(created.url, image.url)',
              filepath: 'test/db-test.js',
              line: 33,
              async: true
            }));
            t.is(_rec8._expr(_rec8._capt(_rec8._capt(created, 'arguments/0/object').likes, 'arguments/0'), {
              content: 't.is(created.likes, image.likes)',
              filepath: 'test/db-test.js',
              line: 34,
              async: true
            }), _rec9._expr(_rec9._capt(_rec9._capt(image, 'arguments/1/object').likes, 'arguments/1'), {
              content: 't.is(created.likes, image.likes)',
              filepath: 'test/db-test.js',
              line: 34,
              async: true
            }));
            t.is(_rec10._expr(_rec10._capt(_rec10._capt(created, 'arguments/0/object').liked, 'arguments/0'), {
              content: 't.is(created.liked, image.liked)',
              filepath: 'test/db-test.js',
              line: 35,
              async: true
            }), _rec11._expr(_rec11._capt(_rec11._capt(image, 'arguments/1/object').liked, 'arguments/1'), {
              content: 't.is(created.liked, image.liked)',
              filepath: 'test/db-test.js',
              line: 35,
              async: true
            }));
            t.deepEqual(_rec12._expr(_rec12._capt(_rec12._capt(created, 'arguments/0/object').tags, 'arguments/0'), {
              content: 't.deepEqual(created.tags, [\'awesome\', \'picture\', \'tags\'])',
              filepath: 'test/db-test.js',
              line: 36,
              async: true
            }), _rec13._expr(_rec13._capt(['awesome', 'picture', 'tags'], 'arguments/1'), {
              content: 't.deepEqual(created.tags, [\'awesome\', \'picture\', \'tags\'])',
              filepath: 'test/db-test.js',
              line: 36,
              async: true
            }));
            t.is(_rec14._expr(_rec14._capt(_rec14._capt(created, 'arguments/0/object').user_id, 'arguments/0'), {
              content: 't.is(created.user_id, image.user_id)',
              filepath: 'test/db-test.js',
              line: 37,
              async: true
            }), _rec15._expr(_rec15._capt(_rec15._capt(image, 'arguments/1/object').user_id, 'arguments/1'), {
              content: 't.is(created.user_id, image.user_id)',
              filepath: 'test/db-test.js',
              line: 37,
              async: true
            }));
            t.is(_rec16._expr(_rec16._capt((0, _typeof3.default)(_rec16._capt(_rec16._capt(created, 'arguments/0/argument/object').id, 'arguments/0/argument')), 'arguments/0'), {
              content: 't.is(typeof created.id, \'string\')',
              filepath: 'test/db-test.js',
              line: 38,
              async: true
            }), 'string');
            t.is(_rec17._expr(_rec17._capt(_rec17._capt(created, 'arguments/0/object').public_id, 'arguments/0'), {
              content: 't.is(created.public_id, uuid.encode(created.id))',
              filepath: 'test/db-test.js',
              line: 39,
              async: true
            }), _rec18._expr(_rec18._capt(_rec18._capt(uuid, 'arguments/1/callee/object').encode(_rec18._capt(_rec18._capt(created, 'arguments/1/arguments/0/object').id, 'arguments/1/arguments/0')), 'arguments/1'), {
              content: 't.is(created.public_id, uuid.encode(created.id))',
              filepath: 'test/db-test.js',
              line: 39,
              async: true
            }));
            t.truthy(_rec19._expr(_rec19._capt(_rec19._capt(created, 'arguments/0/object').createdAt, 'arguments/0'), {
              content: 't.truthy(created.createdAt)',
              filepath: 'test/db-test.js',
              line: 40,
              async: true
            }));

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());

test('like image', function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee5(t) {
    var _rec20 = new _powerAssertRecorder(),
        _rec21 = new _powerAssertRecorder(),
        _rec22 = new _powerAssertRecorder(),
        _rec23 = new _powerAssertRecorder();

    var image, created, result;
    return _index2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            t.is(_rec20._expr(_rec20._capt((0, _typeof3.default)(_rec20._capt(_rec20._capt(db, 'arguments/0/argument/object').likeImage, 'arguments/0/argument')), 'arguments/0'), {
              content: 't.is(typeof db.likeImage, \'function\', \'likedImage should be a function\')',
              filepath: 'test/db-test.js',
              line: 44,
              async: true
            }), 'function', 'likedImage should be a function');

            image = fixtures.getImage();
            _context5.next = 4;
            return db.saveImage(image);

          case 4:
            created = _context5.sent;
            _context5.next = 7;
            return db.likeImage(created.public_id);

          case 7:
            result = _context5.sent;


            t.true(_rec21._expr(_rec21._capt(_rec21._capt(result, 'arguments/0/object').liked, 'arguments/0'), {
              content: 't.true(result.liked)',
              filepath: 'test/db-test.js',
              line: 50,
              async: true
            }));
            t.is(_rec22._expr(_rec22._capt(_rec22._capt(result, 'arguments/0/object').likes, 'arguments/0'), {
              content: 't.is(result.likes, image.likes + 1)',
              filepath: 'test/db-test.js',
              line: 51,
              async: true
            }), _rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(image, 'arguments/1/left/object').likes, 'arguments/1/left') + 1, 'arguments/1'), {
              content: 't.is(result.likes, image.likes + 1)',
              filepath: 'test/db-test.js',
              line: 51,
              async: true
            }));

          case 10:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=../node_modules/.cache/ava/8e4ae2b216a14c9cae1973ff53e99491.js.map