{"version":3,"sources":["db-test.js"],"names":[],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\n\nconst dbName = `platzigram_${uuid.v4()}`\nconst db = new Db({db: dbName})\n\ntest.before('setup database', async t => {\n  await db.connect()\n  t.true(db.connected, 'should be connected')\n})\n\ntest.after('disconect database', async t => {\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnected')\n})\n\ntest.after.always('cleanup database', async t => {\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, ['awesome', 'picture', 'tags'])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\ntest('like image', async t => {\n  t.is(typeof db.likeImage, 'function', 'likedImage should be a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.public_id)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n"]}